---
layout: post
title:  "Quick Guidance of Django"
description: These are the notes I arranged by reading the official documents. Hope you’ll find something useful! # Add post description (optional)
date:   2021-02-25 13:32:20 +0300
categories: Python Django
---
This is a quik guidance to create an app with Django and python.


# Overview

Because Django was developed in a fast-paced newsroom environment, it was designed to make common Web-development tasks fast and easy. Here’s an informal overview of how to write a database-driven Web app with Django.

## MTV Pattern of Django

+ Model: In charge of Objects for operations and databases (ORM)
+ Template: In charge of show web pages to users.
+ View: In charge of operation logic, and call Model and Template at the right time.

Besides, Django has a *url distributor*, its usage is to distribute requested URL to different *View*, and *View* request corresponding *Template* and *Model*. 

<img src="https://img-blog.csdnimg.cn/img_convert/ac831315289696da84a568a043450af9.png" alt="捕获" style="zoom:50%;" />

<center>Model view of Djange</center>

## Quick Start

### Install:

```python
pip install Django
```

### Project Structure:

To Create project, by typing in the cmd:

```bash
django-admin startproject ProjectName
```

After Creating the project, the project is shown below:

```
mysite+
	-manage.py # Files managed by Django
	-mysite+
		-_init_.py
		-settings.py # Configuration files
		-urls.py # Routing system, url configuration
		-wsgi.py # The decided wsgi of the structure
```

These files are:

- The outer `mysite/` root directory is a container for your project. Its name doesn’t matter to *Django*; you can rename it to anything you like.
- `manage.py`: A command-line utility that lets you interact with this Django project in various ways. You can read all the details about `manage.py` in [django-admin and manage.py](https://docs.djangoproject.com/en/3.1/ref/django-admin/).
- The inner `mysite/` directory is the actual Python package for your project. Its name is the Python package name you’ll need to use to import anything inside it (e.g. `mysite.urls`).
- `mysite/__init__.py`: An empty file that tells Python that this directory should be considered a Python package. If you’re a Python beginner, read [more about packages](https://docs.python.org/3/tutorial/modules.html#tut-packages) in the official Python docs.
- `mysite/settings.py`: Settings/configuration for this Django project.  [Django settings](https://docs.djangoproject.com/en/3.1/topics/settings/) will tell you all about how settings work.
- `mysite/urls.py`: The *URL* declarations for this Django project; a “table of contents” of your *Django-powered* site. You can read more about URLs in [URL dispatcher](https://docs.djangoproject.com/en/3.1/topics/http/urls/).
- `mysite/asgi.py`: An entry-point for *ASGI-compatible* web servers to serve your project. See [How to deploy with ASGI](https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/) for more details.
- `mysite/wsgi.py`: An entry-point for *WSGI-compatible* web servers to serve your project. See [How to deploy with WSGI](https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/) for more details.

### Run the Project:

By cmd:

```
python manager.py runserver # 127.0.0.1:8000
```

<img src="https://img-blog.csdnimg.cn/20210314174538138.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="捕获" style="zoom:50%;" />

<center>Image1: Start a Django project</center>

You can also customize your port in configuration:

<img src="https://img-blog.csdnimg.cn/20210314174611441.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="Confuguration" style="zoom:60%;" />

<center>Image2: Configure the running port</center>

#### `settings.py`:

In side `setting.py`, there lies configuration of this project.

+ Bass directory of the project is shown below:

  <img src="https://img-blog.csdnimg.cn/20210314174711439.PNG" alt="BassDIR" style="zoom:67%;" />

+ *HTML* templates:

  <img src="https://img-blog.csdnimg.cn/20210314174732886.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="Templates" style="zoom:67%;" />

  Template files are shown in `'DIRS'`.

### Start the First HTTP request:

Inside `url.py`, you can resolve HTTP responses:

```python
from django.contrib import admin
from django.shortcuts import HttpResponse,render
from django.urls import path


def index(request):
    # logic

    # return result
    # return HttpResponse('index') # Return a String
    return render(request, 'index.html')  # Return a HTML page

urlpatterns = [
    path('admin/', admin.site.urls),
    path('index/', index),
]
```

After reaching *127.0.0.1:8000/index/*, you can be successfully routed to String index page. Also, you can be routed to a HTML page by  returning `reder(request, 'HTMLpage.html')`.

### Import Static Files:

To start this step, let's go to *Bootstrap*, and fetch a simple static *HTML* template, copy and paste in to our project-`./templates/lohin.html`:



<img src="https://img-blog.csdnimg.cn/2021031417475822.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" style="zoom:60%;" />

<center>HTML page of a "sign in" function</center>

After creating a *HTML* file, we need to add a link connecting to it inside `url.py`. 

```python
def login(request):
    return render(request, 'login.html')


urlpatterns = [
    path('admin/', admin.site.urls),
    path(r'index/', index),
    path('login/',login)
]

```

This time, when we start running *Django* and access http://127.0.0.1:8000/login, we can obtain a page without any static templates:

<img src="https://img-blog.csdnimg.cn/20210314174842198.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" style="zoom:60%;" />

<center>Login Page Without Static Files</center>

Then, we need to guide into static files. To do this, we need to add a reference to the real path of static files in `settings.py`, and add static files directory.

<img src="https://img-blog.csdnimg.cn/20210314174858528.PNG" alt="Staticfiles" style="zoom: 50%;" />

<center>Static Files directory</center>

<img src="https://img-blog.csdnimg.cn/20210314174912168.PNG" alt="StaticFilesSettings" style="zoom: 50%;" />

<center>Add Static Files References in settings.py</center>

We then need to found the required static dependencies. After we downloading *Bootstrap* from its official website, we can add the package in to `./static/plugins/bootstrap-3.3.7-dist`.

Then, the required *CSS* file can be found in the resources page, then we can fetch it into out own project structure, and add it into `./static/css.signin.css`

Finally, we can add link in the *HTML* page inside <head> to link the static files:

```html
<link rel="stylesheet" href="/static/plugins/bootstrap-3.3.7-dist/css/bootstrap.css">
<link rel="stylesheet" href="/static/css/signin.css">
```

After all these have done, we can then access the page with static files:

<img src="https://img-blog.csdnimg.cn/20210314174931945.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="FinallygetStatic" style="zoom:60%;" />  

<center>Finally Get Static Styles</center>

### Realize Sign In:

To  realize signing in, use *form* label `<form></form>`to submit the content to aimed location, inside which:

+  `action=""` is the location to be submitted (default the current location), `method=""` is the requesting method (including *get* and *post*, default *get*).
+  `<input></input>` label should indicate `name=""`
+  There should be a `<buttion></button>`. 

Below shows a sample *form* label.

```html
<form class="form-signin" action="" method="post" novalidate>
    <h2 class="form-signin-heading">Please sign in</h2>
    <label for="inputEmail" class="sr-only">Email address</label>
    <input type="email" id="inputEmail" class="form-control" name="user" placeholder="Email address" required="" autofocus="">
    <label for="inputPassword" class="sr-only">Password</label>
    <input type="password" id="inputPassword" class="form-control" placeholder="Password" required="">
    <div class="checkbox">
        <label>
            <input type="checkbox" value="remember-me"> Remember me
        </label>
    </div>
    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>
</form>
```

To submit a *form* with *Post* request successfully, there need to annotate a **MIDLEWARE** called `csrf` inside `settins.py`:

```python
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
```

   Then, when pressing the button without entering anything, we can see the request message is a **GET** message. <img src="https://img-blog.csdnimg.cn/2021031611191375.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="GetRequest" style="zoom:50%;" />

<center>Get Request</center>

However, when we input some message and hand in the form, it becomes a **Post** message.

<img src="https://img-blog.csdnimg.cn/20210316111952371.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="Post" style="zoom:50%;" />

<center>Post Request</center>

If we print out the **POST** requests, and the corresponding type, we can find that the input value type is *dict*, thus, we can obtain the value inside the returning message:

```python
def login(request):
    print(request, type(request))
    print(request.method, type(request.method))
    if request.method == 'GET':
        return render(request, 'login.html')
    else:
        # The logic of dealing with POST request
        # Obtain the user name and pwd users input
        print(request.POST, type(request.POST))
        print(request.POST.get('user')), type(request.POST['user'])
        print(request.POST['pwd'], type(request.POST['pwd']))
        user = request.POST.get('user')
        pwd = request.POST.get('pwd')
        # To validate the input value via database
        # If validation successes, inform the success of login
        # If validation fails, return the login page
```

```python
Django version 3.1.7, using settings 'Django.settings'
Starting development server at http://127.0.0.1:8000/
Quit the server with CTRL-BREAK.March 15, 2021 - 16:34:26
<WSGIRequest: POST '/login/'> <class 'django.core.handlers.wsgi.WSGIRequest'>
POST <class 'str'>
<QueryDict: {'user': ['alex'], 'pwd': ['123']}> <class 'django.http.request.QueryDict'>
alex
123 <class 'str'>
```

After accomplish the logic of dealing with the login process, the logic of code is shown below:

```python
def login(request):
    if request.method == 'POST':
        # The logic of dealing with POST request
        # Obtain the user name and pwd users input
        user = request.POST.get('user')
        pwd = request.POST.get('pwd')
        # To validate the input value via database
        if user == 'alex' and pwd == '123':
            # If validation successes, inform the success of login
            return HttpResponse('Login Success!!!')
    # Else return the original page
    return render(request, 'login.html')
```

If we get the right password and username, the browser will take us to a new page showing "Login Success!!!", if we get the wrong user name or password, or just send a **GET** request, the page will stay unchanged.

<img src="https://img-blog.csdnimg.cn/20210316112054466.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="LoginSuccess" style="zoom:60%;" />

<center>Login Success</center>

+ Differences between **POST** and **GET** request:

  If using **GET** request, the request message will appear on the *url* (*?user=alex&pwd=123*),

  and to fetch the value, use `requst.GET` rather than `request.POST`. 

  If using **POST** request, the data will be submitted on form without appearance. 

  <img src="https://img-blog.csdnimg.cn/20210316112134626.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="GETRequestURL" style="zoom:50%;" />

<center>GET Request</center>

### Redirect:

Instead of using `render()`, We can use `redirect()` to redirect to another page if user succeeds in logging in.

```python
def login(request):
    if request.method == 'POST':
        # The logic of dealing with POST request
        # Obtain the user name and pwd users input
        user = request.POST.get('user')
        pwd = request.POST.get('pwd')
        # To validate the input value via database
        if user == 'alex' and pwd == '123':
            # If validation successes, inform the success of login
            return redirect('/index/')
    # Else return the original page
    return render(request, 'login.html')

```

### Start an App:

1. By *CMD*: `python manage.py startapp appName` .

2. By running `manage.py` by task:

   tools -> run `manage.py` by task -> appear an window -> type in command.

   

<img src="https://img-blog.csdnimg.cn/20210316112201190.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" style="zoom:50%;" />

<center>Create an App</center>

3. To register an App, go to `settings.py` to add one app configuration:

   ```python
   INSTALLED_APPS = [
       'django.contrib.admin',
       'django.contrib.auth',
       'django.contrib.contenttypes',
       'django.contrib.sessions',
       'django.contrib.messages',
       'django.contrib.staticfiles',
       'app01.apps.App01Config'  # add new app
   ]
   ```

4. To rearrange URL routing functions, we need to transfer the functions in `urls.py` to `./app01/views.py`, then import these functions to `url.py`.

   ```python
   from django.contrib import admin
   from django.shortcuts import HttpResponse, render, redirect
   from django.urls import path
   
   from app01 import views
   
   urlpatterns = [
       path('admin/', admin.site.urls),
       path(r'index/', views.index),
       path('login/', views.login)
   ]
   ```

### Object Relation Mapping (*ORM*):

ORM majorly figures out the mapping between an object and an database table, every instance corresponds to one entity in an table, and the parameters in one object correspond to the column in the table.

```
ORM                           DB
class --------------------->>>Table
Object -------------------->>>Row
Attribute ----------------->>>Field
```

*ORM* provides the mapping of object to database, so that writing *SQL* statements is not necessary, only by manipulate objects can ones set database.

1. Configurate Database connection in `settings.py`:

   ```python
   DATABASES = {
       'default': {
           'ENGINE': 'django.db.backends.sqlite3',
           'NAME': BASE_DIR / 'db.sqlite3',
       }
   }
   ```

2. Write one class under `./app01/models.py`:

```python
from django.db import models


# Create your models here.
class User(models.Model):
    username = models.CharField(max_length=32)    # Varchar(32)
    password = models.CharField(max_length=32)
```

3. Execute database migration:

   ```
   python manage.py makemigrations  # Scan the #changes under all the models.py, and make the #changes into migration files
   python manage.py migrate
   ```

   <img src="https://img-blog.csdnimg.cn/20210316112257560.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="migrat" style="zoom:60%;" />

<center>ORM and Database</center>

4. Test *ORM*:

   We can write printing function in Index request:

   ```python
   def index(request):
       # logic
       # Test ORM
       from app01 import models
       res = models.User.objects.all()
       for i in res:
           print(i, i.username, i.password, type(i.username))
       print(res, type(res))
       return render(request, 'index.html')  # Return a HTML page
   ```

   Then, the out put will be the entities added in the database:

   ```python
   User object (1) Danny 123 <class 'str'>
   User object (2) Alex 456 <class 'str'>
   <QuerySet [<User: User object (1)>, <User: User object (2)>]> <class 'django.db.models.query.QuerySet'>
   
   ```

5. Check database when logging in:

   We can add one configuration when consulting the database, if the user and password can be found in the database, return `./index.html`, if there is not any match, stay in `./login.html`.

   ```python
   def login(request):
       if request.method == 'POST':
           # The logic of dealing with POST request
           # Obtain the user name and pwd users input
           user = request.POST.get('user')
           pwd = request.POST.get('pwd')
           # To validate the input value via database
           # if user == 'alex' and pwd == '123':
           if models.User.objects.filter(username=user, password=pwd):
               # If validation successes, inform the success of login
               return redirect('/index/')
       # Else return the original page
       return render(request, 'login.html')
   ```

## CURD （***Create*** ***Update*** ***Read*** ***Delete***）

In this session, we are going to set up a book publishing control system which is able to  create, read, update, delete data in *mysql* database.

### Set Up Environment:

First, we need to create and connect to a database which contains Primary Key (id) and name of  each publisher, and add a *Publisher* object in `medels.py`.  Then as shown in the previous session, we are required to make database migration through calling `python manage.py makemigrations` and `python manage.py migrate`. After finishing all these, the output is shown below:

 <img src="https://img-blog.csdnimg.cn/20210317205131888.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="publisherDatabase" style="zoom:60%;" />

<center>Database Migration of Publisher </center>

 Following that, we can write new routing relation in `urls.py`, and write new routing function in `./app01/views.py`, also, do not forget to create a *HTML* page containing  a data representation (a simple table).

Routing function in `./app01/views.py` which print out all the objects added in the database:

```python
def publisher_list(request):
    # Logic
    # Obtain all the information of Publishers
    # Return a page which contains the information
    all_publishers = models.Publisher.objects.all()
    for i in all_publishers:
        print(i)
        print(i.id)
        print(i.name)
    return render(request, 'publisher_list.html')
```

Added *url* pattern in `url.py`:

```python
urlpatterns = [
    path('admin/', admin.site.urls),
    path(r'index/', views.index),
    path('login/', views.login),
    url(r'publisher_list/', views.publisher_list)
]
```

A simple testing page with a table is created in `./templates/publisher.html`

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Publishers</title>
</head>
<body>
<table border="1">
    <thead>
    <tr>
        <th>Sequence Number</th>
        <th>ID</th>
        <th>Publisher Name</th>
    </tr>
    </thead>
    <tbody>
    <tr>
        <td>1</td>
        <td>1</td>
        <td>Publisher</td>
    </tr>
    </tbody>
</table>

</body>
</html>
```

After running the project, the output is shown below:

<img src="https://img-blog.csdnimg.cn/20210317205057999.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="ResultsofTestingDatabase" style="zoom:60%;" />

<center>Results of Testing</center>

### Template Grammar:

To transfer data from database to template, there is a pattern in template grammar. First, we need to add one parameter in routing function:

```python
def publisher_list(request):
    # Logic
    # Obtain all the information of Publishers
    # Return a page which contains the information
    all_publishers = models.Publisher.objects.all()  # Objests list 
    return render(request, 'publisher_list.html', {'all_Publishers': all_publishers})
```

Then, we need to add parameter transfer function in our template. In out table body, `{{ variable_name }}` is used to pass in corresponding parameter in routing function, and `{% to_apply_tags_inside %}`:

```python
variables:
{{variable_name}}
for:
    {{% for i in variable_name %}}
        {{forloop.couter}}
        {{i.attribute}}
    {{% endfor %}}

if:
    {{% if condition %}}
        statement
    {{% elseif condition1 %}}
        statement1
    {{% else %}}
        statement2
    {{% endif %}}
```

After adding template grammar, the `publisher_list.html` looks like:

```html
<table border="1">
    <thead>
    <tr>
        <th>Sequence Number</th>
        <th>ID</th>
        <th>Publisher Name</th>
    </tr>
    </thead>
    <tbody>
        {% for i in all_Publishers %}
            <tr>
                <td>{{ forloop.counter }}</td>
                <td>{{ i.id }}</td>
                <td>{{ i.name }}</td>
            </tr>
        {% endfor %}

    </tbody>
</table>
```

After we mapping the variables on the page, the results looks like:

<img src="https://img-blog.csdnimg.cn/20210317204717878.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="PublisherOutput" style="zoom:60%;" />

<center>Publisher Output</center>

### Create:

First, when customer send a **Get** request get to a page, the page returns returns a **Form** which can be used to intake information, then after customer clicking a button to submit, the page can submit a **Post** request, and the server can insert the data into database, finally, the server returns a **Redirect** page, and the page can show all the refreshed data to the user.

1. Add a new *HTML* page containing a **Form** and a new *url* pattern in `urls.py`. 

   `publisher_add.html` is shown below:

   ```html
   <!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <title>Publisher_add</title>
   </head>
   <body>
   <form action="" method="post">
       Publisher_Name: <input type="text" name="pub_name">
       <button>
           Submit
       </button>
   </form>
   </body>
   </html>
   ```

   *Url* patterns inside `urls.py`:

   ```python
   urlpatterns = [
       path('admin/', admin.site.urls),
       path(r'index/', views.index),
       path('login/', views.login),
       url(r'publisher_list/', views.publisher_list),
       url(r'publisher_add', views.publisher_add)
   ]
   ```

2. Write a routing function in `./app01/views.py` to resolve the **GET** request and the **POST** request:

   ```python
   # Add new publishers
   def publisher_add(request):
       if request.method == 'POST':
           # Post request
           # Obtain the data user input
           pub_name = request.POST.get('pub_name')
           # print(pub_name)
           # Add the data into database
           res = models.Publisher.objects.create(name=pub_name)
           # print(res, type(res))
           # return a new page containing new data
           return redirect('/publisher_list/')
       # Get request returns a page containing Form
       return render(request, 'publisher_add.html')
   ```

3. After we testing the function, the submit page and the returning page with is shown below:

   <img src="https://img-blog.csdnimg.cn/20210317204754440.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="PublisherAdd1" style="zoom:60%;" />

    <center>Submit Page </center>


    <img src="https://img-blog.csdnimg.cn/20210317204817735.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="PublisherAdd2" style="zoom:60%;" />
    
    <center>Returning Page With Added Data</center>

### Delete:

We can add a routing function in `./app01/views.py` called `publisher_del()`, and we need to add corresponding *url* pattern in `url.py`. To show the deletion operation on front page, we need also to add a button option to delete the item with send back an request:

In the table body, add the following line:

```html
<tbody>
    {% for i in all_Publishers %}
        <tr>
            <td>{{ forloop.counter }}</td>
            <td>{{ i.id }}</td>
            <td>{{ i.name }}</td>
            <td><a href="/publisher_del/?pk={{ i.id }}">Delete</a> </td>
        </tr>
    {% endfor %}

</tbody>
```

The routing function which contains database query is shown below, it firstly obtain the object whose id equal to the number of row which user is intend to delete, and then delete it from the database. And finally redirect to the updated page.

```python
def publisher_del(request):
    # Obtain the id of the object
    pk = request.GET.get('pk')
    # print(pk)
    # Delete the id from database
    models.Publisher.objects.get(pk=pk).delete()
    # Redirect to the original page
    return redirect('/publisher_list/')
```

### Update:

The update page is almost the same as the delete page, only the logic is different. To update a value, firstly, the button on the `publisher_list` which provide the function will rout user to the edit page, where back-end gets the Primary key of which user choose to edit and transfer the *PK* to routing function `publisher_edit()`. 

```html
<tbody>
    {% for i in all_Publishers %}
        <tr>
            <td>{{ forloop.counter }}</td>
            <td>{{ i.id }}</td>
            <td>{{ i.name }}</td>
            <td>
                <a href="/publisher_del/?pk={{ i.id }}">Delete</a>
                <a href="/publisher_edit/?pk={{ i.id }}">Edit</a>  {# Value of pk equals to object's id #}
            </td>
        </tr>
    {% endfor %}

</tbody>
```

publisher_edit.html:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Publisher_edit</title>
</head>
<body>
<form action="" method="post">
    Publisher_Name: <input type="text" name="pub_name" value="{{ pub_obj.name }}"> <span>{{ error }}</span>
    <button>
        Submit
    </button>
</form>
</body>
```
After that, user can manipulate the data in the corresponding row. After submission, and the name of the changed value is not empty or duplicated, the chosen object's name will be updated and confirmed. Then it will redirect user to the original page.

```python
# Edit Publishers
def publisher_edit(request):
    pk = request.GET.get('pk')
    pub_obj = models.Publisher.objects.get(pk=pk)

    # Get Request: return a page containing Form, and input the original data
    if request.method == 'GET':
        return render(request, 'publisher_edit.html', {'pub_obj': pub_obj})

    # Post Request:
    else:
        # Get the name of publisher user submitted
        pub_name = request.POST.get('pub_name')

        # If there are duplicated names already in database
        if models.Publisher.objects.filter(name=pub_name):
            return render(request, 'publisher_edit.html', {'error': 'Name already exits!'})

        # If the name is empty
        if not pub_name:
            return render(request, 'publisher_edit.html', {'error': 'Name cannot be empty!'})

        # Manipulate the data in database
        pub_obj.name = pub_name
        # Submit the change
        pub_obj.save()
        # Redirect to the original page in Publisher_list
        return redirect('/publisher_list')
```

The manipulation steps are shown below:

<img src="https://img-blog.csdnimg.cn/20210317204905846.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="edit.1PNG" style="zoom:60%;" />

<center>Original Page</center>

<img src="https://img-blog.csdnimg.cn/2021031720492053.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="edit2" style="zoom:60%;" />

<center>Manipulate Row 3</center>

<img src="https://img-blog.csdnimg.cn/20210317204932946.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0hoaGhoYW9oYW8=,size_16,color_FFFFFF,t_70" alt="edit3" style="zoom: 60%;" />
<center>Updated Value</center>